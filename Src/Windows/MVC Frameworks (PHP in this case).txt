https://stackoverflow.com/

The following explanation of MVC is taken from the codeigniter user guide.

The Model represents your data structures. Typically your model classes will contain functions that help you retrieve, insert, and update information in your database.

The View is the information that is being presented to a user. A View will normally be a web page. A view can also be a page fragment like a header or footer. It can also be an RSS page, or any other type of "page".

The Controller serves as an intermediary between the Model, the View, and any other resources needed to process the HTTP request and generate a web page.

http://codeigniter.com/user_guide/overview/mvc.html

Edit: Example of what you may include in each entity

Controller (this file is targeted by the browser)

<?php
    //Assuming that the database has already been connected

    //Include the model
    require('members_model.php');
    //Get the posts made by a particular user from the database)
    $posts = $this->members_model->get_posts($_POST['member_id']);
    //Output the view
    require('members_posts.php');
?>

Model

<?php
    class members_model {

        //Function to get all the posts made by a particular member
        public function get_posts($member_id) {
            $query = mysql_query("
                SELECT *
                FROM Posts
                WHERE author = ".$member_id
            );
            return mysql_fetch_array($query);
        }

    }
?>

View

<html>
    <head>
        <title>All posts by member</title>
    </head>
    <body>
        <?php foreach($posts as $post): ?>
            <h1><?=$post['title']?></h1>
            <span><?=$post['date']?></span>
            <?=$post['body']?>
        <?php endforeach; ?>
    </body>
</html>

Obviously, this is an extremely simplified example but hopefully this gives you a rough idea of what should be going where.

PHP is a template language in itself since it can be used with html , although there other template solution available such as smarty (which are designer friendly) .Bassicaly in your view you would be doing consing fil Foo.phtml

<p>Welcome <?= $this->username ?> </p>

Your View Class might have function loadView() inside which

   class My_View
    {
    public $data;
    public $view;

    public function __set($property,$value)
{
$data[$preperty] = $value;
}

public function __get($property)
{
return $data[$preperty];
}


    public function loadView()
    {
    ob_start();
    include('Foo.phtml');
    $this->view = $ob_get_clean();

    }

public function __toString()
{
return $this->view;
}
    }

In your controller class

class My_Controller {
public function __construct()
{
  $view = new My_View();
$view->username = "jason bouren";
$view->loadView();
echo $view;
}
}

